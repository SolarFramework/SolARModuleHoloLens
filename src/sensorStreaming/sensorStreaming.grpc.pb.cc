// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sensorStreaming.proto

#include "sensorStreaming/sensorStreaming.pb.h"
#include "sensorStreaming/sensorStreaming.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sensorStreaming {

static const char* Streamer_method_names[] = {
  "/sensorStreaming.Streamer/EnableSensors",
  "/sensorStreaming.Streamer/GetCamIntrinsics",
  "/sensorStreaming.Streamer/SensorStream",
};

std::unique_ptr< Streamer::Stub> Streamer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Streamer::Stub> stub(new Streamer::Stub(channel));
  return stub;
}

Streamer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_EnableSensors_(Streamer_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCamIntrinsics_(Streamer_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SensorStream_(Streamer_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status Streamer::Stub::EnableSensors(::grpc::ClientContext* context, const ::sensorStreaming::SensorListRPC& request, ::sensorStreaming::SensorListRPC* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_EnableSensors_, context, request, response);
}

void Streamer::Stub::experimental_async::EnableSensors(::grpc::ClientContext* context, const ::sensorStreaming::SensorListRPC* request, ::sensorStreaming::SensorListRPC* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EnableSensors_, context, request, response, std::move(f));
}

void Streamer::Stub::experimental_async::EnableSensors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sensorStreaming::SensorListRPC* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EnableSensors_, context, request, response, std::move(f));
}

void Streamer::Stub::experimental_async::EnableSensors(::grpc::ClientContext* context, const ::sensorStreaming::SensorListRPC* request, ::sensorStreaming::SensorListRPC* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EnableSensors_, context, request, response, reactor);
}

void Streamer::Stub::experimental_async::EnableSensors(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sensorStreaming::SensorListRPC* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EnableSensors_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensorStreaming::SensorListRPC>* Streamer::Stub::AsyncEnableSensorsRaw(::grpc::ClientContext* context, const ::sensorStreaming::SensorListRPC& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sensorStreaming::SensorListRPC>::Create(channel_.get(), cq, rpcmethod_EnableSensors_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sensorStreaming::SensorListRPC>* Streamer::Stub::PrepareAsyncEnableSensorsRaw(::grpc::ClientContext* context, const ::sensorStreaming::SensorListRPC& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sensorStreaming::SensorListRPC>::Create(channel_.get(), cq, rpcmethod_EnableSensors_, context, request, false);
}

::grpc::Status Streamer::Stub::GetCamIntrinsics(::grpc::ClientContext* context, const ::sensorStreaming::NameRPC& request, ::sensorStreaming::CameraIntrinsicsRPC* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCamIntrinsics_, context, request, response);
}

void Streamer::Stub::experimental_async::GetCamIntrinsics(::grpc::ClientContext* context, const ::sensorStreaming::NameRPC* request, ::sensorStreaming::CameraIntrinsicsRPC* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCamIntrinsics_, context, request, response, std::move(f));
}

void Streamer::Stub::experimental_async::GetCamIntrinsics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sensorStreaming::CameraIntrinsicsRPC* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCamIntrinsics_, context, request, response, std::move(f));
}

void Streamer::Stub::experimental_async::GetCamIntrinsics(::grpc::ClientContext* context, const ::sensorStreaming::NameRPC* request, ::sensorStreaming::CameraIntrinsicsRPC* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCamIntrinsics_, context, request, response, reactor);
}

void Streamer::Stub::experimental_async::GetCamIntrinsics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sensorStreaming::CameraIntrinsicsRPC* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCamIntrinsics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensorStreaming::CameraIntrinsicsRPC>* Streamer::Stub::AsyncGetCamIntrinsicsRaw(::grpc::ClientContext* context, const ::sensorStreaming::NameRPC& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sensorStreaming::CameraIntrinsicsRPC>::Create(channel_.get(), cq, rpcmethod_GetCamIntrinsics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sensorStreaming::CameraIntrinsicsRPC>* Streamer::Stub::PrepareAsyncGetCamIntrinsicsRaw(::grpc::ClientContext* context, const ::sensorStreaming::NameRPC& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sensorStreaming::CameraIntrinsicsRPC>::Create(channel_.get(), cq, rpcmethod_GetCamIntrinsics_, context, request, false);
}

::grpc::ClientReader< ::sensorStreaming::SensorFrameRPC>* Streamer::Stub::SensorStreamRaw(::grpc::ClientContext* context, const ::sensorStreaming::NameRPC& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::sensorStreaming::SensorFrameRPC>::Create(channel_.get(), rpcmethod_SensorStream_, context, request);
}

void Streamer::Stub::experimental_async::SensorStream(::grpc::ClientContext* context, ::sensorStreaming::NameRPC* request, ::grpc::experimental::ClientReadReactor< ::sensorStreaming::SensorFrameRPC>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::sensorStreaming::SensorFrameRPC>::Create(stub_->channel_.get(), stub_->rpcmethod_SensorStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensorStreaming::SensorFrameRPC>* Streamer::Stub::AsyncSensorStreamRaw(::grpc::ClientContext* context, const ::sensorStreaming::NameRPC& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::sensorStreaming::SensorFrameRPC>::Create(channel_.get(), cq, rpcmethod_SensorStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensorStreaming::SensorFrameRPC>* Streamer::Stub::PrepareAsyncSensorStreamRaw(::grpc::ClientContext* context, const ::sensorStreaming::NameRPC& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::sensorStreaming::SensorFrameRPC>::Create(channel_.get(), cq, rpcmethod_SensorStream_, context, request, false, nullptr);
}

Streamer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Streamer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Streamer::Service, ::sensorStreaming::SensorListRPC, ::sensorStreaming::SensorListRPC>(
          std::mem_fn(&Streamer::Service::EnableSensors), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Streamer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Streamer::Service, ::sensorStreaming::NameRPC, ::sensorStreaming::CameraIntrinsicsRPC>(
          std::mem_fn(&Streamer::Service::GetCamIntrinsics), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Streamer_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Streamer::Service, ::sensorStreaming::NameRPC, ::sensorStreaming::SensorFrameRPC>(
          std::mem_fn(&Streamer::Service::SensorStream), this)));
}

Streamer::Service::~Service() {
}

::grpc::Status Streamer::Service::EnableSensors(::grpc::ServerContext* context, const ::sensorStreaming::SensorListRPC* request, ::sensorStreaming::SensorListRPC* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Streamer::Service::GetCamIntrinsics(::grpc::ServerContext* context, const ::sensorStreaming::NameRPC* request, ::sensorStreaming::CameraIntrinsicsRPC* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Streamer::Service::SensorStream(::grpc::ServerContext* context, const ::sensorStreaming::NameRPC* request, ::grpc::ServerWriter< ::sensorStreaming::SensorFrameRPC>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sensorStreaming

