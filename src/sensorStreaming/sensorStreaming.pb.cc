// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensorStreaming.proto

#include "sensorStreaming/sensorStreaming.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sensorStreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageRPC_sensorStreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensorStreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatRPC_sensorStreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensorStreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NameRPC_sensorStreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensorStreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PoseRPC_sensorStreaming_2eproto;
namespace sensorStreaming {
class SensorListRPCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorListRPC> _instance;
} _SensorListRPC_default_instance_;
class NameRPCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NameRPC> _instance;
} _NameRPC_default_instance_;
class CameraIntrinsicsRPCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraIntrinsicsRPC> _instance;
} _CameraIntrinsicsRPC_default_instance_;
class MatRPCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatRPC> _instance;
} _MatRPC_default_instance_;
class PoseRPCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoseRPC> _instance;
} _PoseRPC_default_instance_;
class ImageRPCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageRPC> _instance;
} _ImageRPC_default_instance_;
class SensorFrameRPCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorFrameRPC> _instance;
} _SensorFrameRPC_default_instance_;
}  // namespace sensorStreaming
static void InitDefaultsscc_info_CameraIntrinsicsRPC_sensorStreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensorStreaming::_CameraIntrinsicsRPC_default_instance_;
    new (ptr) ::sensorStreaming::CameraIntrinsicsRPC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensorStreaming::CameraIntrinsicsRPC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraIntrinsicsRPC_sensorStreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CameraIntrinsicsRPC_sensorStreaming_2eproto}, {}};

static void InitDefaultsscc_info_ImageRPC_sensorStreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensorStreaming::_ImageRPC_default_instance_;
    new (ptr) ::sensorStreaming::ImageRPC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensorStreaming::ImageRPC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageRPC_sensorStreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ImageRPC_sensorStreaming_2eproto}, {}};

static void InitDefaultsscc_info_MatRPC_sensorStreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensorStreaming::_MatRPC_default_instance_;
    new (ptr) ::sensorStreaming::MatRPC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensorStreaming::MatRPC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatRPC_sensorStreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatRPC_sensorStreaming_2eproto}, {}};

static void InitDefaultsscc_info_NameRPC_sensorStreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensorStreaming::_NameRPC_default_instance_;
    new (ptr) ::sensorStreaming::NameRPC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensorStreaming::NameRPC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NameRPC_sensorStreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NameRPC_sensorStreaming_2eproto}, {}};

static void InitDefaultsscc_info_PoseRPC_sensorStreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensorStreaming::_PoseRPC_default_instance_;
    new (ptr) ::sensorStreaming::PoseRPC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensorStreaming::PoseRPC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PoseRPC_sensorStreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PoseRPC_sensorStreaming_2eproto}, {
      &scc_info_MatRPC_sensorStreaming_2eproto.base,}};

static void InitDefaultsscc_info_SensorFrameRPC_sensorStreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensorStreaming::_SensorFrameRPC_default_instance_;
    new (ptr) ::sensorStreaming::SensorFrameRPC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensorStreaming::SensorFrameRPC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SensorFrameRPC_sensorStreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SensorFrameRPC_sensorStreaming_2eproto}, {
      &scc_info_ImageRPC_sensorStreaming_2eproto.base,
      &scc_info_PoseRPC_sensorStreaming_2eproto.base,}};

static void InitDefaultsscc_info_SensorListRPC_sensorStreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensorStreaming::_SensorListRPC_default_instance_;
    new (ptr) ::sensorStreaming::SensorListRPC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensorStreaming::SensorListRPC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorListRPC_sensorStreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SensorListRPC_sensorStreaming_2eproto}, {
      &scc_info_NameRPC_sensorStreaming_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sensorStreaming_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sensorStreaming_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sensorStreaming_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sensorStreaming_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::SensorListRPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::SensorListRPC, sensor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::NameRPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::NameRPC, cameraname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::CameraIntrinsicsRPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::CameraIntrinsicsRPC, fx_),
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::CameraIntrinsicsRPC, fy_),
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::CameraIntrinsicsRPC, cx_),
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::CameraIntrinsicsRPC, cy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::MatRPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::MatRPC, m11_),
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::MatRPC, m12_),
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::MatRPC, m13_),
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::MatRPC, m14_),
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::MatRPC, m21_),
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::MatRPC, m22_),
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::MatRPC, m23_),
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::MatRPC, m24_),
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::MatRPC, m31_),
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::MatRPC, m32_),
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::MatRPC, m33_),
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::MatRPC, m34_),
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::MatRPC, m41_),
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::MatRPC, m42_),
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::MatRPC, m43_),
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::MatRPC, m44_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::PoseRPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::PoseRPC, cameraproj_),
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::PoseRPC, cameraview_),
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::PoseRPC, frametoorigin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::ImageRPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::ImageRPC, width_),
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::ImageRPC, height_),
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::ImageRPC, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::SensorFrameRPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::SensorFrameRPC, image_),
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::SensorFrameRPC, pose_),
  PROTOBUF_FIELD_OFFSET(::sensorStreaming::SensorFrameRPC, timestamp_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sensorStreaming::SensorListRPC)},
  { 6, -1, sizeof(::sensorStreaming::NameRPC)},
  { 12, -1, sizeof(::sensorStreaming::CameraIntrinsicsRPC)},
  { 21, -1, sizeof(::sensorStreaming::MatRPC)},
  { 42, -1, sizeof(::sensorStreaming::PoseRPC)},
  { 50, -1, sizeof(::sensorStreaming::ImageRPC)},
  { 58, -1, sizeof(::sensorStreaming::SensorFrameRPC)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensorStreaming::_SensorListRPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensorStreaming::_NameRPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensorStreaming::_CameraIntrinsicsRPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensorStreaming::_MatRPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensorStreaming::_PoseRPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensorStreaming::_ImageRPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensorStreaming::_SensorFrameRPC_default_instance_),
};

const char descriptor_table_protodef_sensorStreaming_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025sensorStreaming.proto\022\017sensorStreaming"
  "\"9\n\rSensorListRPC\022(\n\006sensor\030\001 \003(\0132\030.sens"
  "orStreaming.NameRPC\"\035\n\007NameRPC\022\022\n\ncamera"
  "Name\030\001 \001(\t\"E\n\023CameraIntrinsicsRPC\022\n\n\002fx\030"
  "\001 \001(\002\022\n\n\002fy\030\002 \001(\002\022\n\n\002cx\030\003 \001(\002\022\n\n\002cy\030\004 \001("
  "\002\"\330\001\n\006MatRPC\022\013\n\003m11\030\001 \001(\002\022\013\n\003m12\030\002 \001(\002\022\013"
  "\n\003m13\030\003 \001(\002\022\013\n\003m14\030\004 \001(\002\022\013\n\003m21\030\005 \001(\002\022\013\n"
  "\003m22\030\006 \001(\002\022\013\n\003m23\030\007 \001(\002\022\013\n\003m24\030\010 \001(\002\022\013\n\003"
  "m31\030\t \001(\002\022\013\n\003m32\030\n \001(\002\022\013\n\003m33\030\013 \001(\002\022\013\n\003m"
  "34\030\014 \001(\002\022\013\n\003m41\030\r \001(\002\022\013\n\003m42\030\016 \001(\002\022\013\n\003m4"
  "3\030\017 \001(\002\022\013\n\003m44\030\020 \001(\002\"\223\001\n\007PoseRPC\022+\n\ncame"
  "raProj\030\001 \001(\0132\027.sensorStreaming.MatRPC\022+\n"
  "\ncameraView\030\002 \001(\0132\027.sensorStreaming.MatR"
  "PC\022.\n\rframeToOrigin\030\003 \001(\0132\027.sensorStream"
  "ing.MatRPC\"7\n\010ImageRPC\022\r\n\005width\030\001 \001(\005\022\016\n"
  "\006height\030\002 \001(\005\022\014\n\004data\030\003 \001(\014\"u\n\016SensorFra"
  "meRPC\022(\n\005image\030\001 \001(\0132\031.sensorStreaming.I"
  "mageRPC\022&\n\004pose\030\002 \001(\0132\030.sensorStreaming."
  "PoseRPC\022\021\n\ttimestamp\030\003 \001(\0012\200\002\n\010Streamer\022"
  "O\n\rEnableSensors\022\036.sensorStreaming.Senso"
  "rListRPC\032\036.sensorStreaming.SensorListRPC"
  "\022T\n\020GetCamIntrinsics\022\030.sensorStreaming.N"
  "ameRPC\032$.sensorStreaming.CameraIntrinsic"
  "sRPC\"\000\022M\n\014SensorStream\022\030.sensorStreaming"
  ".NameRPC\032\037.sensorStreaming.SensorFrameRP"
  "C\"\0000\001B5\n\025solar.sensorStreamingB\024SensorSt"
  "reamingProtoP\001\242\002\003STRb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sensorStreaming_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sensorStreaming_2eproto_sccs[7] = {
  &scc_info_CameraIntrinsicsRPC_sensorStreaming_2eproto.base,
  &scc_info_ImageRPC_sensorStreaming_2eproto.base,
  &scc_info_MatRPC_sensorStreaming_2eproto.base,
  &scc_info_NameRPC_sensorStreaming_2eproto.base,
  &scc_info_PoseRPC_sensorStreaming_2eproto.base,
  &scc_info_SensorFrameRPC_sensorStreaming_2eproto.base,
  &scc_info_SensorListRPC_sensorStreaming_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sensorStreaming_2eproto_once;
static bool descriptor_table_sensorStreaming_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sensorStreaming_2eproto = {
  &descriptor_table_sensorStreaming_2eproto_initialized, descriptor_table_protodef_sensorStreaming_2eproto, "sensorStreaming.proto", 1068,
  &descriptor_table_sensorStreaming_2eproto_once, descriptor_table_sensorStreaming_2eproto_sccs, descriptor_table_sensorStreaming_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_sensorStreaming_2eproto::offsets,
  file_level_metadata_sensorStreaming_2eproto, 7, file_level_enum_descriptors_sensorStreaming_2eproto, file_level_service_descriptors_sensorStreaming_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sensorStreaming_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sensorStreaming_2eproto), true);
namespace sensorStreaming {

// ===================================================================

void SensorListRPC::InitAsDefaultInstance() {
}
class SensorListRPC::_Internal {
 public:
};

SensorListRPC::SensorListRPC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensorStreaming.SensorListRPC)
}
SensorListRPC::SensorListRPC(const SensorListRPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      sensor_(from.sensor_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensorStreaming.SensorListRPC)
}

void SensorListRPC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorListRPC_sensorStreaming_2eproto.base);
}

SensorListRPC::~SensorListRPC() {
  // @@protoc_insertion_point(destructor:sensorStreaming.SensorListRPC)
  SharedDtor();
}

void SensorListRPC::SharedDtor() {
}

void SensorListRPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorListRPC& SensorListRPC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorListRPC_sensorStreaming_2eproto.base);
  return *internal_default_instance();
}


void SensorListRPC::Clear() {
// @@protoc_insertion_point(message_clear_start:sensorStreaming.SensorListRPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_.Clear();
  _internal_metadata_.Clear();
}

const char* SensorListRPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sensorStreaming.NameRPC sensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorListRPC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensorStreaming.SensorListRPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensorStreaming.NameRPC sensor = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sensor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sensor(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensorStreaming.SensorListRPC)
  return target;
}

size_t SensorListRPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensorStreaming.SensorListRPC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensorStreaming.NameRPC sensor = 1;
  total_size += 1UL * this->_internal_sensor_size();
  for (const auto& msg : this->sensor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorListRPC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensorStreaming.SensorListRPC)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorListRPC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorListRPC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensorStreaming.SensorListRPC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensorStreaming.SensorListRPC)
    MergeFrom(*source);
  }
}

void SensorListRPC::MergeFrom(const SensorListRPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensorStreaming.SensorListRPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_.MergeFrom(from.sensor_);
}

void SensorListRPC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensorStreaming.SensorListRPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorListRPC::CopyFrom(const SensorListRPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensorStreaming.SensorListRPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorListRPC::IsInitialized() const {
  return true;
}

void SensorListRPC::InternalSwap(SensorListRPC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sensor_.InternalSwap(&other->sensor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorListRPC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NameRPC::InitAsDefaultInstance() {
}
class NameRPC::_Internal {
 public:
};

NameRPC::NameRPC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensorStreaming.NameRPC)
}
NameRPC::NameRPC(const NameRPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cameraname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cameraname().empty()) {
    cameraname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cameraname_);
  }
  // @@protoc_insertion_point(copy_constructor:sensorStreaming.NameRPC)
}

void NameRPC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NameRPC_sensorStreaming_2eproto.base);
  cameraname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NameRPC::~NameRPC() {
  // @@protoc_insertion_point(destructor:sensorStreaming.NameRPC)
  SharedDtor();
}

void NameRPC::SharedDtor() {
  cameraname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NameRPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NameRPC& NameRPC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NameRPC_sensorStreaming_2eproto.base);
  return *internal_default_instance();
}


void NameRPC::Clear() {
// @@protoc_insertion_point(message_clear_start:sensorStreaming.NameRPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cameraname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* NameRPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cameraName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cameraname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensorStreaming.NameRPC.cameraName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NameRPC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensorStreaming.NameRPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cameraName = 1;
  if (this->cameraname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cameraname().data(), static_cast<int>(this->_internal_cameraname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensorStreaming.NameRPC.cameraName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cameraname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensorStreaming.NameRPC)
  return target;
}

size_t NameRPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensorStreaming.NameRPC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cameraName = 1;
  if (this->cameraname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cameraname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NameRPC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensorStreaming.NameRPC)
  GOOGLE_DCHECK_NE(&from, this);
  const NameRPC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NameRPC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensorStreaming.NameRPC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensorStreaming.NameRPC)
    MergeFrom(*source);
  }
}

void NameRPC::MergeFrom(const NameRPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensorStreaming.NameRPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cameraname().size() > 0) {

    cameraname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cameraname_);
  }
}

void NameRPC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensorStreaming.NameRPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameRPC::CopyFrom(const NameRPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensorStreaming.NameRPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameRPC::IsInitialized() const {
  return true;
}

void NameRPC::InternalSwap(NameRPC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cameraname_.Swap(&other->cameraname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata NameRPC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraIntrinsicsRPC::InitAsDefaultInstance() {
}
class CameraIntrinsicsRPC::_Internal {
 public:
};

CameraIntrinsicsRPC::CameraIntrinsicsRPC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensorStreaming.CameraIntrinsicsRPC)
}
CameraIntrinsicsRPC::CameraIntrinsicsRPC(const CameraIntrinsicsRPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fx_, &from.fx_,
    static_cast<size_t>(reinterpret_cast<char*>(&cy_) -
    reinterpret_cast<char*>(&fx_)) + sizeof(cy_));
  // @@protoc_insertion_point(copy_constructor:sensorStreaming.CameraIntrinsicsRPC)
}

void CameraIntrinsicsRPC::SharedCtor() {
  ::memset(&fx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cy_) -
      reinterpret_cast<char*>(&fx_)) + sizeof(cy_));
}

CameraIntrinsicsRPC::~CameraIntrinsicsRPC() {
  // @@protoc_insertion_point(destructor:sensorStreaming.CameraIntrinsicsRPC)
  SharedDtor();
}

void CameraIntrinsicsRPC::SharedDtor() {
}

void CameraIntrinsicsRPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraIntrinsicsRPC& CameraIntrinsicsRPC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraIntrinsicsRPC_sensorStreaming_2eproto.base);
  return *internal_default_instance();
}


void CameraIntrinsicsRPC::Clear() {
// @@protoc_insertion_point(message_clear_start:sensorStreaming.CameraIntrinsicsRPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cy_) -
      reinterpret_cast<char*>(&fx_)) + sizeof(cy_));
  _internal_metadata_.Clear();
}

const char* CameraIntrinsicsRPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float fx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          fx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          fy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          cx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          cy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraIntrinsicsRPC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensorStreaming.CameraIntrinsicsRPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float fx = 1;
  if (!(this->fx() <= 0 && this->fx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_fx(), target);
  }

  // float fy = 2;
  if (!(this->fy() <= 0 && this->fy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_fy(), target);
  }

  // float cx = 3;
  if (!(this->cx() <= 0 && this->cx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_cx(), target);
  }

  // float cy = 4;
  if (!(this->cy() <= 0 && this->cy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_cy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensorStreaming.CameraIntrinsicsRPC)
  return target;
}

size_t CameraIntrinsicsRPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensorStreaming.CameraIntrinsicsRPC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float fx = 1;
  if (!(this->fx() <= 0 && this->fx() >= 0)) {
    total_size += 1 + 4;
  }

  // float fy = 2;
  if (!(this->fy() <= 0 && this->fy() >= 0)) {
    total_size += 1 + 4;
  }

  // float cx = 3;
  if (!(this->cx() <= 0 && this->cx() >= 0)) {
    total_size += 1 + 4;
  }

  // float cy = 4;
  if (!(this->cy() <= 0 && this->cy() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraIntrinsicsRPC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensorStreaming.CameraIntrinsicsRPC)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraIntrinsicsRPC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraIntrinsicsRPC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensorStreaming.CameraIntrinsicsRPC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensorStreaming.CameraIntrinsicsRPC)
    MergeFrom(*source);
  }
}

void CameraIntrinsicsRPC::MergeFrom(const CameraIntrinsicsRPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensorStreaming.CameraIntrinsicsRPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.fx() <= 0 && from.fx() >= 0)) {
    _internal_set_fx(from._internal_fx());
  }
  if (!(from.fy() <= 0 && from.fy() >= 0)) {
    _internal_set_fy(from._internal_fy());
  }
  if (!(from.cx() <= 0 && from.cx() >= 0)) {
    _internal_set_cx(from._internal_cx());
  }
  if (!(from.cy() <= 0 && from.cy() >= 0)) {
    _internal_set_cy(from._internal_cy());
  }
}

void CameraIntrinsicsRPC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensorStreaming.CameraIntrinsicsRPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraIntrinsicsRPC::CopyFrom(const CameraIntrinsicsRPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensorStreaming.CameraIntrinsicsRPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraIntrinsicsRPC::IsInitialized() const {
  return true;
}

void CameraIntrinsicsRPC::InternalSwap(CameraIntrinsicsRPC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fx_, other->fx_);
  swap(fy_, other->fy_);
  swap(cx_, other->cx_);
  swap(cy_, other->cy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraIntrinsicsRPC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MatRPC::InitAsDefaultInstance() {
}
class MatRPC::_Internal {
 public:
};

MatRPC::MatRPC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensorStreaming.MatRPC)
}
MatRPC::MatRPC(const MatRPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&m11_, &from.m11_,
    static_cast<size_t>(reinterpret_cast<char*>(&m44_) -
    reinterpret_cast<char*>(&m11_)) + sizeof(m44_));
  // @@protoc_insertion_point(copy_constructor:sensorStreaming.MatRPC)
}

void MatRPC::SharedCtor() {
  ::memset(&m11_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m44_) -
      reinterpret_cast<char*>(&m11_)) + sizeof(m44_));
}

MatRPC::~MatRPC() {
  // @@protoc_insertion_point(destructor:sensorStreaming.MatRPC)
  SharedDtor();
}

void MatRPC::SharedDtor() {
}

void MatRPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatRPC& MatRPC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatRPC_sensorStreaming_2eproto.base);
  return *internal_default_instance();
}


void MatRPC::Clear() {
// @@protoc_insertion_point(message_clear_start:sensorStreaming.MatRPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&m11_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m44_) -
      reinterpret_cast<char*>(&m11_)) + sizeof(m44_));
  _internal_metadata_.Clear();
}

const char* MatRPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float m11 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          m11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m12 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          m12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m13 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          m13_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m14 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          m14_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m21 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          m21_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m22 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          m22_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m23 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          m23_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m24 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          m24_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m31 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          m31_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m32 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          m32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m33 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          m33_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m34 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          m34_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m41 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          m41_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m42 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          m42_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m43 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          m43_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float m44 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          m44_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatRPC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensorStreaming.MatRPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float m11 = 1;
  if (!(this->m11() <= 0 && this->m11() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_m11(), target);
  }

  // float m12 = 2;
  if (!(this->m12() <= 0 && this->m12() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_m12(), target);
  }

  // float m13 = 3;
  if (!(this->m13() <= 0 && this->m13() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_m13(), target);
  }

  // float m14 = 4;
  if (!(this->m14() <= 0 && this->m14() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_m14(), target);
  }

  // float m21 = 5;
  if (!(this->m21() <= 0 && this->m21() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_m21(), target);
  }

  // float m22 = 6;
  if (!(this->m22() <= 0 && this->m22() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_m22(), target);
  }

  // float m23 = 7;
  if (!(this->m23() <= 0 && this->m23() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_m23(), target);
  }

  // float m24 = 8;
  if (!(this->m24() <= 0 && this->m24() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_m24(), target);
  }

  // float m31 = 9;
  if (!(this->m31() <= 0 && this->m31() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_m31(), target);
  }

  // float m32 = 10;
  if (!(this->m32() <= 0 && this->m32() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_m32(), target);
  }

  // float m33 = 11;
  if (!(this->m33() <= 0 && this->m33() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_m33(), target);
  }

  // float m34 = 12;
  if (!(this->m34() <= 0 && this->m34() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_m34(), target);
  }

  // float m41 = 13;
  if (!(this->m41() <= 0 && this->m41() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_m41(), target);
  }

  // float m42 = 14;
  if (!(this->m42() <= 0 && this->m42() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_m42(), target);
  }

  // float m43 = 15;
  if (!(this->m43() <= 0 && this->m43() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_m43(), target);
  }

  // float m44 = 16;
  if (!(this->m44() <= 0 && this->m44() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_m44(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensorStreaming.MatRPC)
  return target;
}

size_t MatRPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensorStreaming.MatRPC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float m11 = 1;
  if (!(this->m11() <= 0 && this->m11() >= 0)) {
    total_size += 1 + 4;
  }

  // float m12 = 2;
  if (!(this->m12() <= 0 && this->m12() >= 0)) {
    total_size += 1 + 4;
  }

  // float m13 = 3;
  if (!(this->m13() <= 0 && this->m13() >= 0)) {
    total_size += 1 + 4;
  }

  // float m14 = 4;
  if (!(this->m14() <= 0 && this->m14() >= 0)) {
    total_size += 1 + 4;
  }

  // float m21 = 5;
  if (!(this->m21() <= 0 && this->m21() >= 0)) {
    total_size += 1 + 4;
  }

  // float m22 = 6;
  if (!(this->m22() <= 0 && this->m22() >= 0)) {
    total_size += 1 + 4;
  }

  // float m23 = 7;
  if (!(this->m23() <= 0 && this->m23() >= 0)) {
    total_size += 1 + 4;
  }

  // float m24 = 8;
  if (!(this->m24() <= 0 && this->m24() >= 0)) {
    total_size += 1 + 4;
  }

  // float m31 = 9;
  if (!(this->m31() <= 0 && this->m31() >= 0)) {
    total_size += 1 + 4;
  }

  // float m32 = 10;
  if (!(this->m32() <= 0 && this->m32() >= 0)) {
    total_size += 1 + 4;
  }

  // float m33 = 11;
  if (!(this->m33() <= 0 && this->m33() >= 0)) {
    total_size += 1 + 4;
  }

  // float m34 = 12;
  if (!(this->m34() <= 0 && this->m34() >= 0)) {
    total_size += 1 + 4;
  }

  // float m41 = 13;
  if (!(this->m41() <= 0 && this->m41() >= 0)) {
    total_size += 1 + 4;
  }

  // float m42 = 14;
  if (!(this->m42() <= 0 && this->m42() >= 0)) {
    total_size += 1 + 4;
  }

  // float m43 = 15;
  if (!(this->m43() <= 0 && this->m43() >= 0)) {
    total_size += 1 + 4;
  }

  // float m44 = 16;
  if (!(this->m44() <= 0 && this->m44() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatRPC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensorStreaming.MatRPC)
  GOOGLE_DCHECK_NE(&from, this);
  const MatRPC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatRPC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensorStreaming.MatRPC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensorStreaming.MatRPC)
    MergeFrom(*source);
  }
}

void MatRPC::MergeFrom(const MatRPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensorStreaming.MatRPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.m11() <= 0 && from.m11() >= 0)) {
    _internal_set_m11(from._internal_m11());
  }
  if (!(from.m12() <= 0 && from.m12() >= 0)) {
    _internal_set_m12(from._internal_m12());
  }
  if (!(from.m13() <= 0 && from.m13() >= 0)) {
    _internal_set_m13(from._internal_m13());
  }
  if (!(from.m14() <= 0 && from.m14() >= 0)) {
    _internal_set_m14(from._internal_m14());
  }
  if (!(from.m21() <= 0 && from.m21() >= 0)) {
    _internal_set_m21(from._internal_m21());
  }
  if (!(from.m22() <= 0 && from.m22() >= 0)) {
    _internal_set_m22(from._internal_m22());
  }
  if (!(from.m23() <= 0 && from.m23() >= 0)) {
    _internal_set_m23(from._internal_m23());
  }
  if (!(from.m24() <= 0 && from.m24() >= 0)) {
    _internal_set_m24(from._internal_m24());
  }
  if (!(from.m31() <= 0 && from.m31() >= 0)) {
    _internal_set_m31(from._internal_m31());
  }
  if (!(from.m32() <= 0 && from.m32() >= 0)) {
    _internal_set_m32(from._internal_m32());
  }
  if (!(from.m33() <= 0 && from.m33() >= 0)) {
    _internal_set_m33(from._internal_m33());
  }
  if (!(from.m34() <= 0 && from.m34() >= 0)) {
    _internal_set_m34(from._internal_m34());
  }
  if (!(from.m41() <= 0 && from.m41() >= 0)) {
    _internal_set_m41(from._internal_m41());
  }
  if (!(from.m42() <= 0 && from.m42() >= 0)) {
    _internal_set_m42(from._internal_m42());
  }
  if (!(from.m43() <= 0 && from.m43() >= 0)) {
    _internal_set_m43(from._internal_m43());
  }
  if (!(from.m44() <= 0 && from.m44() >= 0)) {
    _internal_set_m44(from._internal_m44());
  }
}

void MatRPC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensorStreaming.MatRPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatRPC::CopyFrom(const MatRPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensorStreaming.MatRPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatRPC::IsInitialized() const {
  return true;
}

void MatRPC::InternalSwap(MatRPC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(m11_, other->m11_);
  swap(m12_, other->m12_);
  swap(m13_, other->m13_);
  swap(m14_, other->m14_);
  swap(m21_, other->m21_);
  swap(m22_, other->m22_);
  swap(m23_, other->m23_);
  swap(m24_, other->m24_);
  swap(m31_, other->m31_);
  swap(m32_, other->m32_);
  swap(m33_, other->m33_);
  swap(m34_, other->m34_);
  swap(m41_, other->m41_);
  swap(m42_, other->m42_);
  swap(m43_, other->m43_);
  swap(m44_, other->m44_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatRPC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PoseRPC::InitAsDefaultInstance() {
  ::sensorStreaming::_PoseRPC_default_instance_._instance.get_mutable()->cameraproj_ = const_cast< ::sensorStreaming::MatRPC*>(
      ::sensorStreaming::MatRPC::internal_default_instance());
  ::sensorStreaming::_PoseRPC_default_instance_._instance.get_mutable()->cameraview_ = const_cast< ::sensorStreaming::MatRPC*>(
      ::sensorStreaming::MatRPC::internal_default_instance());
  ::sensorStreaming::_PoseRPC_default_instance_._instance.get_mutable()->frametoorigin_ = const_cast< ::sensorStreaming::MatRPC*>(
      ::sensorStreaming::MatRPC::internal_default_instance());
}
class PoseRPC::_Internal {
 public:
  static const ::sensorStreaming::MatRPC& cameraproj(const PoseRPC* msg);
  static const ::sensorStreaming::MatRPC& cameraview(const PoseRPC* msg);
  static const ::sensorStreaming::MatRPC& frametoorigin(const PoseRPC* msg);
};

const ::sensorStreaming::MatRPC&
PoseRPC::_Internal::cameraproj(const PoseRPC* msg) {
  return *msg->cameraproj_;
}
const ::sensorStreaming::MatRPC&
PoseRPC::_Internal::cameraview(const PoseRPC* msg) {
  return *msg->cameraview_;
}
const ::sensorStreaming::MatRPC&
PoseRPC::_Internal::frametoorigin(const PoseRPC* msg) {
  return *msg->frametoorigin_;
}
PoseRPC::PoseRPC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensorStreaming.PoseRPC)
}
PoseRPC::PoseRPC(const PoseRPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_cameraproj()) {
    cameraproj_ = new ::sensorStreaming::MatRPC(*from.cameraproj_);
  } else {
    cameraproj_ = nullptr;
  }
  if (from._internal_has_cameraview()) {
    cameraview_ = new ::sensorStreaming::MatRPC(*from.cameraview_);
  } else {
    cameraview_ = nullptr;
  }
  if (from._internal_has_frametoorigin()) {
    frametoorigin_ = new ::sensorStreaming::MatRPC(*from.frametoorigin_);
  } else {
    frametoorigin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sensorStreaming.PoseRPC)
}

void PoseRPC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PoseRPC_sensorStreaming_2eproto.base);
  ::memset(&cameraproj_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frametoorigin_) -
      reinterpret_cast<char*>(&cameraproj_)) + sizeof(frametoorigin_));
}

PoseRPC::~PoseRPC() {
  // @@protoc_insertion_point(destructor:sensorStreaming.PoseRPC)
  SharedDtor();
}

void PoseRPC::SharedDtor() {
  if (this != internal_default_instance()) delete cameraproj_;
  if (this != internal_default_instance()) delete cameraview_;
  if (this != internal_default_instance()) delete frametoorigin_;
}

void PoseRPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoseRPC& PoseRPC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoseRPC_sensorStreaming_2eproto.base);
  return *internal_default_instance();
}


void PoseRPC::Clear() {
// @@protoc_insertion_point(message_clear_start:sensorStreaming.PoseRPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && cameraproj_ != nullptr) {
    delete cameraproj_;
  }
  cameraproj_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cameraview_ != nullptr) {
    delete cameraview_;
  }
  cameraview_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && frametoorigin_ != nullptr) {
    delete frametoorigin_;
  }
  frametoorigin_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PoseRPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sensorStreaming.MatRPC cameraProj = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cameraproj(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensorStreaming.MatRPC cameraView = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cameraview(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensorStreaming.MatRPC frameToOrigin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_frametoorigin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoseRPC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensorStreaming.PoseRPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensorStreaming.MatRPC cameraProj = 1;
  if (this->has_cameraproj()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cameraproj(this), target, stream);
  }

  // .sensorStreaming.MatRPC cameraView = 2;
  if (this->has_cameraview()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cameraview(this), target, stream);
  }

  // .sensorStreaming.MatRPC frameToOrigin = 3;
  if (this->has_frametoorigin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::frametoorigin(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensorStreaming.PoseRPC)
  return target;
}

size_t PoseRPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensorStreaming.PoseRPC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensorStreaming.MatRPC cameraProj = 1;
  if (this->has_cameraproj()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cameraproj_);
  }

  // .sensorStreaming.MatRPC cameraView = 2;
  if (this->has_cameraview()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cameraview_);
  }

  // .sensorStreaming.MatRPC frameToOrigin = 3;
  if (this->has_frametoorigin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frametoorigin_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseRPC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensorStreaming.PoseRPC)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseRPC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoseRPC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensorStreaming.PoseRPC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensorStreaming.PoseRPC)
    MergeFrom(*source);
  }
}

void PoseRPC::MergeFrom(const PoseRPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensorStreaming.PoseRPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cameraproj()) {
    _internal_mutable_cameraproj()->::sensorStreaming::MatRPC::MergeFrom(from._internal_cameraproj());
  }
  if (from.has_cameraview()) {
    _internal_mutable_cameraview()->::sensorStreaming::MatRPC::MergeFrom(from._internal_cameraview());
  }
  if (from.has_frametoorigin()) {
    _internal_mutable_frametoorigin()->::sensorStreaming::MatRPC::MergeFrom(from._internal_frametoorigin());
  }
}

void PoseRPC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensorStreaming.PoseRPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseRPC::CopyFrom(const PoseRPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensorStreaming.PoseRPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseRPC::IsInitialized() const {
  return true;
}

void PoseRPC::InternalSwap(PoseRPC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cameraproj_, other->cameraproj_);
  swap(cameraview_, other->cameraview_);
  swap(frametoorigin_, other->frametoorigin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseRPC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageRPC::InitAsDefaultInstance() {
}
class ImageRPC::_Internal {
 public:
};

ImageRPC::ImageRPC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensorStreaming.ImageRPC)
}
ImageRPC::ImageRPC(const ImageRPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:sensorStreaming.ImageRPC)
}

void ImageRPC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageRPC_sensorStreaming_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

ImageRPC::~ImageRPC() {
  // @@protoc_insertion_point(destructor:sensorStreaming.ImageRPC)
  SharedDtor();
}

void ImageRPC::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImageRPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageRPC& ImageRPC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageRPC_sensorStreaming_2eproto.base);
  return *internal_default_instance();
}


void ImageRPC::Clear() {
// @@protoc_insertion_point(message_clear_start:sensorStreaming.ImageRPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

const char* ImageRPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageRPC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensorStreaming.ImageRPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensorStreaming.ImageRPC)
  return target;
}

size_t ImageRPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensorStreaming.ImageRPC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageRPC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensorStreaming.ImageRPC)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageRPC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageRPC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensorStreaming.ImageRPC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensorStreaming.ImageRPC)
    MergeFrom(*source);
  }
}

void ImageRPC::MergeFrom(const ImageRPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensorStreaming.ImageRPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void ImageRPC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensorStreaming.ImageRPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageRPC::CopyFrom(const ImageRPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensorStreaming.ImageRPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageRPC::IsInitialized() const {
  return true;
}

void ImageRPC::InternalSwap(ImageRPC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(width_, other->width_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageRPC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorFrameRPC::InitAsDefaultInstance() {
  ::sensorStreaming::_SensorFrameRPC_default_instance_._instance.get_mutable()->image_ = const_cast< ::sensorStreaming::ImageRPC*>(
      ::sensorStreaming::ImageRPC::internal_default_instance());
  ::sensorStreaming::_SensorFrameRPC_default_instance_._instance.get_mutable()->pose_ = const_cast< ::sensorStreaming::PoseRPC*>(
      ::sensorStreaming::PoseRPC::internal_default_instance());
}
class SensorFrameRPC::_Internal {
 public:
  static const ::sensorStreaming::ImageRPC& image(const SensorFrameRPC* msg);
  static const ::sensorStreaming::PoseRPC& pose(const SensorFrameRPC* msg);
};

const ::sensorStreaming::ImageRPC&
SensorFrameRPC::_Internal::image(const SensorFrameRPC* msg) {
  return *msg->image_;
}
const ::sensorStreaming::PoseRPC&
SensorFrameRPC::_Internal::pose(const SensorFrameRPC* msg) {
  return *msg->pose_;
}
SensorFrameRPC::SensorFrameRPC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensorStreaming.SensorFrameRPC)
}
SensorFrameRPC::SensorFrameRPC(const SensorFrameRPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_image()) {
    image_ = new ::sensorStreaming::ImageRPC(*from.image_);
  } else {
    image_ = nullptr;
  }
  if (from._internal_has_pose()) {
    pose_ = new ::sensorStreaming::PoseRPC(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:sensorStreaming.SensorFrameRPC)
}

void SensorFrameRPC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorFrameRPC_sensorStreaming_2eproto.base);
  ::memset(&image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&image_)) + sizeof(timestamp_));
}

SensorFrameRPC::~SensorFrameRPC() {
  // @@protoc_insertion_point(destructor:sensorStreaming.SensorFrameRPC)
  SharedDtor();
}

void SensorFrameRPC::SharedDtor() {
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete pose_;
}

void SensorFrameRPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorFrameRPC& SensorFrameRPC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorFrameRPC_sensorStreaming_2eproto.base);
  return *internal_default_instance();
}


void SensorFrameRPC::Clear() {
// @@protoc_insertion_point(message_clear_start:sensorStreaming.SensorFrameRPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  timestamp_ = 0;
  _internal_metadata_.Clear();
}

const char* SensorFrameRPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sensorStreaming.ImageRPC image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensorStreaming.PoseRPC pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorFrameRPC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensorStreaming.SensorFrameRPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensorStreaming.ImageRPC image = 1;
  if (this->has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::image(this), target, stream);
  }

  // .sensorStreaming.PoseRPC pose = 2;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pose(this), target, stream);
  }

  // double timestamp = 3;
  if (!(this->timestamp() <= 0 && this->timestamp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensorStreaming.SensorFrameRPC)
  return target;
}

size_t SensorFrameRPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensorStreaming.SensorFrameRPC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensorStreaming.ImageRPC image = 1;
  if (this->has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // .sensorStreaming.PoseRPC pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // double timestamp = 3;
  if (!(this->timestamp() <= 0 && this->timestamp() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorFrameRPC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensorStreaming.SensorFrameRPC)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorFrameRPC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorFrameRPC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensorStreaming.SensorFrameRPC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensorStreaming.SensorFrameRPC)
    MergeFrom(*source);
  }
}

void SensorFrameRPC::MergeFrom(const SensorFrameRPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensorStreaming.SensorFrameRPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_image()) {
    _internal_mutable_image()->::sensorStreaming::ImageRPC::MergeFrom(from._internal_image());
  }
  if (from.has_pose()) {
    _internal_mutable_pose()->::sensorStreaming::PoseRPC::MergeFrom(from._internal_pose());
  }
  if (!(from.timestamp() <= 0 && from.timestamp() >= 0)) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void SensorFrameRPC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensorStreaming.SensorFrameRPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorFrameRPC::CopyFrom(const SensorFrameRPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensorStreaming.SensorFrameRPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorFrameRPC::IsInitialized() const {
  return true;
}

void SensorFrameRPC::InternalSwap(SensorFrameRPC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(image_, other->image_);
  swap(pose_, other->pose_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorFrameRPC::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sensorStreaming
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sensorStreaming::SensorListRPC* Arena::CreateMaybeMessage< ::sensorStreaming::SensorListRPC >(Arena* arena) {
  return Arena::CreateInternal< ::sensorStreaming::SensorListRPC >(arena);
}
template<> PROTOBUF_NOINLINE ::sensorStreaming::NameRPC* Arena::CreateMaybeMessage< ::sensorStreaming::NameRPC >(Arena* arena) {
  return Arena::CreateInternal< ::sensorStreaming::NameRPC >(arena);
}
template<> PROTOBUF_NOINLINE ::sensorStreaming::CameraIntrinsicsRPC* Arena::CreateMaybeMessage< ::sensorStreaming::CameraIntrinsicsRPC >(Arena* arena) {
  return Arena::CreateInternal< ::sensorStreaming::CameraIntrinsicsRPC >(arena);
}
template<> PROTOBUF_NOINLINE ::sensorStreaming::MatRPC* Arena::CreateMaybeMessage< ::sensorStreaming::MatRPC >(Arena* arena) {
  return Arena::CreateInternal< ::sensorStreaming::MatRPC >(arena);
}
template<> PROTOBUF_NOINLINE ::sensorStreaming::PoseRPC* Arena::CreateMaybeMessage< ::sensorStreaming::PoseRPC >(Arena* arena) {
  return Arena::CreateInternal< ::sensorStreaming::PoseRPC >(arena);
}
template<> PROTOBUF_NOINLINE ::sensorStreaming::ImageRPC* Arena::CreateMaybeMessage< ::sensorStreaming::ImageRPC >(Arena* arena) {
  return Arena::CreateInternal< ::sensorStreaming::ImageRPC >(arena);
}
template<> PROTOBUF_NOINLINE ::sensorStreaming::SensorFrameRPC* Arena::CreateMaybeMessage< ::sensorStreaming::SensorFrameRPC >(Arena* arena) {
  return Arena::CreateInternal< ::sensorStreaming::SensorFrameRPC >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
