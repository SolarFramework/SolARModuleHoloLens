// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensorStreaming.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sensorStreaming_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sensorStreaming_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sensorStreaming_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sensorStreaming_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sensorStreaming_2eproto;
namespace sensorStreaming {
class CameraIntrinsicsRPC;
class CameraIntrinsicsRPCDefaultTypeInternal;
extern CameraIntrinsicsRPCDefaultTypeInternal _CameraIntrinsicsRPC_default_instance_;
class ImageRPC;
class ImageRPCDefaultTypeInternal;
extern ImageRPCDefaultTypeInternal _ImageRPC_default_instance_;
class MatRPC;
class MatRPCDefaultTypeInternal;
extern MatRPCDefaultTypeInternal _MatRPC_default_instance_;
class NameRPC;
class NameRPCDefaultTypeInternal;
extern NameRPCDefaultTypeInternal _NameRPC_default_instance_;
class PoseRPC;
class PoseRPCDefaultTypeInternal;
extern PoseRPCDefaultTypeInternal _PoseRPC_default_instance_;
class SensorFrameRPC;
class SensorFrameRPCDefaultTypeInternal;
extern SensorFrameRPCDefaultTypeInternal _SensorFrameRPC_default_instance_;
}  // namespace sensorStreaming
PROTOBUF_NAMESPACE_OPEN
template<> ::sensorStreaming::CameraIntrinsicsRPC* Arena::CreateMaybeMessage<::sensorStreaming::CameraIntrinsicsRPC>(Arena*);
template<> ::sensorStreaming::ImageRPC* Arena::CreateMaybeMessage<::sensorStreaming::ImageRPC>(Arena*);
template<> ::sensorStreaming::MatRPC* Arena::CreateMaybeMessage<::sensorStreaming::MatRPC>(Arena*);
template<> ::sensorStreaming::NameRPC* Arena::CreateMaybeMessage<::sensorStreaming::NameRPC>(Arena*);
template<> ::sensorStreaming::PoseRPC* Arena::CreateMaybeMessage<::sensorStreaming::PoseRPC>(Arena*);
template<> ::sensorStreaming::SensorFrameRPC* Arena::CreateMaybeMessage<::sensorStreaming::SensorFrameRPC>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sensorStreaming {

// ===================================================================

class NameRPC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensorStreaming.NameRPC) */ {
 public:
  NameRPC();
  virtual ~NameRPC();

  NameRPC(const NameRPC& from);
  NameRPC(NameRPC&& from) noexcept
    : NameRPC() {
    *this = ::std::move(from);
  }

  inline NameRPC& operator=(const NameRPC& from) {
    CopyFrom(from);
    return *this;
  }
  inline NameRPC& operator=(NameRPC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NameRPC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NameRPC* internal_default_instance() {
    return reinterpret_cast<const NameRPC*>(
               &_NameRPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NameRPC& a, NameRPC& b) {
    a.Swap(&b);
  }
  inline void Swap(NameRPC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NameRPC* New() const final {
    return CreateMaybeMessage<NameRPC>(nullptr);
  }

  NameRPC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NameRPC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NameRPC& from);
  void MergeFrom(const NameRPC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NameRPC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensorStreaming.NameRPC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensorStreaming_2eproto);
    return ::descriptor_table_sensorStreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraNameFieldNumber = 1,
  };
  // string cameraName = 1;
  void clear_cameraname();
  const std::string& cameraname() const;
  void set_cameraname(const std::string& value);
  void set_cameraname(std::string&& value);
  void set_cameraname(const char* value);
  void set_cameraname(const char* value, size_t size);
  std::string* mutable_cameraname();
  std::string* release_cameraname();
  void set_allocated_cameraname(std::string* cameraname);
  private:
  const std::string& _internal_cameraname() const;
  void _internal_set_cameraname(const std::string& value);
  std::string* _internal_mutable_cameraname();
  public:

  // @@protoc_insertion_point(class_scope:sensorStreaming.NameRPC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensorStreaming_2eproto;
};
// -------------------------------------------------------------------

class CameraIntrinsicsRPC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensorStreaming.CameraIntrinsicsRPC) */ {
 public:
  CameraIntrinsicsRPC();
  virtual ~CameraIntrinsicsRPC();

  CameraIntrinsicsRPC(const CameraIntrinsicsRPC& from);
  CameraIntrinsicsRPC(CameraIntrinsicsRPC&& from) noexcept
    : CameraIntrinsicsRPC() {
    *this = ::std::move(from);
  }

  inline CameraIntrinsicsRPC& operator=(const CameraIntrinsicsRPC& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraIntrinsicsRPC& operator=(CameraIntrinsicsRPC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraIntrinsicsRPC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraIntrinsicsRPC* internal_default_instance() {
    return reinterpret_cast<const CameraIntrinsicsRPC*>(
               &_CameraIntrinsicsRPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CameraIntrinsicsRPC& a, CameraIntrinsicsRPC& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraIntrinsicsRPC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraIntrinsicsRPC* New() const final {
    return CreateMaybeMessage<CameraIntrinsicsRPC>(nullptr);
  }

  CameraIntrinsicsRPC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraIntrinsicsRPC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraIntrinsicsRPC& from);
  void MergeFrom(const CameraIntrinsicsRPC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraIntrinsicsRPC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensorStreaming.CameraIntrinsicsRPC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensorStreaming_2eproto);
    return ::descriptor_table_sensorStreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFxFieldNumber = 1,
    kFyFieldNumber = 2,
    kCxFieldNumber = 3,
    kCyFieldNumber = 4,
  };
  // float fx = 1;
  void clear_fx();
  float fx() const;
  void set_fx(float value);
  private:
  float _internal_fx() const;
  void _internal_set_fx(float value);
  public:

  // float fy = 2;
  void clear_fy();
  float fy() const;
  void set_fy(float value);
  private:
  float _internal_fy() const;
  void _internal_set_fy(float value);
  public:

  // float cx = 3;
  void clear_cx();
  float cx() const;
  void set_cx(float value);
  private:
  float _internal_cx() const;
  void _internal_set_cx(float value);
  public:

  // float cy = 4;
  void clear_cy();
  float cy() const;
  void set_cy(float value);
  private:
  float _internal_cy() const;
  void _internal_set_cy(float value);
  public:

  // @@protoc_insertion_point(class_scope:sensorStreaming.CameraIntrinsicsRPC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float fx_;
  float fy_;
  float cx_;
  float cy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensorStreaming_2eproto;
};
// -------------------------------------------------------------------

class MatRPC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensorStreaming.MatRPC) */ {
 public:
  MatRPC();
  virtual ~MatRPC();

  MatRPC(const MatRPC& from);
  MatRPC(MatRPC&& from) noexcept
    : MatRPC() {
    *this = ::std::move(from);
  }

  inline MatRPC& operator=(const MatRPC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatRPC& operator=(MatRPC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatRPC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatRPC* internal_default_instance() {
    return reinterpret_cast<const MatRPC*>(
               &_MatRPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MatRPC& a, MatRPC& b) {
    a.Swap(&b);
  }
  inline void Swap(MatRPC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatRPC* New() const final {
    return CreateMaybeMessage<MatRPC>(nullptr);
  }

  MatRPC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatRPC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatRPC& from);
  void MergeFrom(const MatRPC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatRPC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensorStreaming.MatRPC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensorStreaming_2eproto);
    return ::descriptor_table_sensorStreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kM11FieldNumber = 1,
    kM12FieldNumber = 2,
    kM13FieldNumber = 3,
    kM14FieldNumber = 4,
    kM21FieldNumber = 5,
    kM22FieldNumber = 6,
    kM23FieldNumber = 7,
    kM24FieldNumber = 8,
    kM31FieldNumber = 9,
    kM32FieldNumber = 10,
    kM33FieldNumber = 11,
    kM34FieldNumber = 12,
    kM41FieldNumber = 13,
    kM42FieldNumber = 14,
    kM43FieldNumber = 15,
    kM44FieldNumber = 16,
  };
  // float m11 = 1;
  void clear_m11();
  float m11() const;
  void set_m11(float value);
  private:
  float _internal_m11() const;
  void _internal_set_m11(float value);
  public:

  // float m12 = 2;
  void clear_m12();
  float m12() const;
  void set_m12(float value);
  private:
  float _internal_m12() const;
  void _internal_set_m12(float value);
  public:

  // float m13 = 3;
  void clear_m13();
  float m13() const;
  void set_m13(float value);
  private:
  float _internal_m13() const;
  void _internal_set_m13(float value);
  public:

  // float m14 = 4;
  void clear_m14();
  float m14() const;
  void set_m14(float value);
  private:
  float _internal_m14() const;
  void _internal_set_m14(float value);
  public:

  // float m21 = 5;
  void clear_m21();
  float m21() const;
  void set_m21(float value);
  private:
  float _internal_m21() const;
  void _internal_set_m21(float value);
  public:

  // float m22 = 6;
  void clear_m22();
  float m22() const;
  void set_m22(float value);
  private:
  float _internal_m22() const;
  void _internal_set_m22(float value);
  public:

  // float m23 = 7;
  void clear_m23();
  float m23() const;
  void set_m23(float value);
  private:
  float _internal_m23() const;
  void _internal_set_m23(float value);
  public:

  // float m24 = 8;
  void clear_m24();
  float m24() const;
  void set_m24(float value);
  private:
  float _internal_m24() const;
  void _internal_set_m24(float value);
  public:

  // float m31 = 9;
  void clear_m31();
  float m31() const;
  void set_m31(float value);
  private:
  float _internal_m31() const;
  void _internal_set_m31(float value);
  public:

  // float m32 = 10;
  void clear_m32();
  float m32() const;
  void set_m32(float value);
  private:
  float _internal_m32() const;
  void _internal_set_m32(float value);
  public:

  // float m33 = 11;
  void clear_m33();
  float m33() const;
  void set_m33(float value);
  private:
  float _internal_m33() const;
  void _internal_set_m33(float value);
  public:

  // float m34 = 12;
  void clear_m34();
  float m34() const;
  void set_m34(float value);
  private:
  float _internal_m34() const;
  void _internal_set_m34(float value);
  public:

  // float m41 = 13;
  void clear_m41();
  float m41() const;
  void set_m41(float value);
  private:
  float _internal_m41() const;
  void _internal_set_m41(float value);
  public:

  // float m42 = 14;
  void clear_m42();
  float m42() const;
  void set_m42(float value);
  private:
  float _internal_m42() const;
  void _internal_set_m42(float value);
  public:

  // float m43 = 15;
  void clear_m43();
  float m43() const;
  void set_m43(float value);
  private:
  float _internal_m43() const;
  void _internal_set_m43(float value);
  public:

  // float m44 = 16;
  void clear_m44();
  float m44() const;
  void set_m44(float value);
  private:
  float _internal_m44() const;
  void _internal_set_m44(float value);
  public:

  // @@protoc_insertion_point(class_scope:sensorStreaming.MatRPC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float m11_;
  float m12_;
  float m13_;
  float m14_;
  float m21_;
  float m22_;
  float m23_;
  float m24_;
  float m31_;
  float m32_;
  float m33_;
  float m34_;
  float m41_;
  float m42_;
  float m43_;
  float m44_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensorStreaming_2eproto;
};
// -------------------------------------------------------------------

class PoseRPC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensorStreaming.PoseRPC) */ {
 public:
  PoseRPC();
  virtual ~PoseRPC();

  PoseRPC(const PoseRPC& from);
  PoseRPC(PoseRPC&& from) noexcept
    : PoseRPC() {
    *this = ::std::move(from);
  }

  inline PoseRPC& operator=(const PoseRPC& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseRPC& operator=(PoseRPC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoseRPC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoseRPC* internal_default_instance() {
    return reinterpret_cast<const PoseRPC*>(
               &_PoseRPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PoseRPC& a, PoseRPC& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseRPC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoseRPC* New() const final {
    return CreateMaybeMessage<PoseRPC>(nullptr);
  }

  PoseRPC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoseRPC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoseRPC& from);
  void MergeFrom(const PoseRPC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseRPC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensorStreaming.PoseRPC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensorStreaming_2eproto);
    return ::descriptor_table_sensorStreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraProjFieldNumber = 1,
    kCameraViewFieldNumber = 2,
    kFrameToOriginFieldNumber = 3,
  };
  // .sensorStreaming.MatRPC cameraProj = 1;
  bool has_cameraproj() const;
  private:
  bool _internal_has_cameraproj() const;
  public:
  void clear_cameraproj();
  const ::sensorStreaming::MatRPC& cameraproj() const;
  ::sensorStreaming::MatRPC* release_cameraproj();
  ::sensorStreaming::MatRPC* mutable_cameraproj();
  void set_allocated_cameraproj(::sensorStreaming::MatRPC* cameraproj);
  private:
  const ::sensorStreaming::MatRPC& _internal_cameraproj() const;
  ::sensorStreaming::MatRPC* _internal_mutable_cameraproj();
  public:

  // .sensorStreaming.MatRPC cameraView = 2;
  bool has_cameraview() const;
  private:
  bool _internal_has_cameraview() const;
  public:
  void clear_cameraview();
  const ::sensorStreaming::MatRPC& cameraview() const;
  ::sensorStreaming::MatRPC* release_cameraview();
  ::sensorStreaming::MatRPC* mutable_cameraview();
  void set_allocated_cameraview(::sensorStreaming::MatRPC* cameraview);
  private:
  const ::sensorStreaming::MatRPC& _internal_cameraview() const;
  ::sensorStreaming::MatRPC* _internal_mutable_cameraview();
  public:

  // .sensorStreaming.MatRPC frameToOrigin = 3;
  bool has_frametoorigin() const;
  private:
  bool _internal_has_frametoorigin() const;
  public:
  void clear_frametoorigin();
  const ::sensorStreaming::MatRPC& frametoorigin() const;
  ::sensorStreaming::MatRPC* release_frametoorigin();
  ::sensorStreaming::MatRPC* mutable_frametoorigin();
  void set_allocated_frametoorigin(::sensorStreaming::MatRPC* frametoorigin);
  private:
  const ::sensorStreaming::MatRPC& _internal_frametoorigin() const;
  ::sensorStreaming::MatRPC* _internal_mutable_frametoorigin();
  public:

  // @@protoc_insertion_point(class_scope:sensorStreaming.PoseRPC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sensorStreaming::MatRPC* cameraproj_;
  ::sensorStreaming::MatRPC* cameraview_;
  ::sensorStreaming::MatRPC* frametoorigin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensorStreaming_2eproto;
};
// -------------------------------------------------------------------

class ImageRPC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensorStreaming.ImageRPC) */ {
 public:
  ImageRPC();
  virtual ~ImageRPC();

  ImageRPC(const ImageRPC& from);
  ImageRPC(ImageRPC&& from) noexcept
    : ImageRPC() {
    *this = ::std::move(from);
  }

  inline ImageRPC& operator=(const ImageRPC& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageRPC& operator=(ImageRPC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageRPC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageRPC* internal_default_instance() {
    return reinterpret_cast<const ImageRPC*>(
               &_ImageRPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ImageRPC& a, ImageRPC& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageRPC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageRPC* New() const final {
    return CreateMaybeMessage<ImageRPC>(nullptr);
  }

  ImageRPC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageRPC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageRPC& from);
  void MergeFrom(const ImageRPC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageRPC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensorStreaming.ImageRPC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensorStreaming_2eproto);
    return ::descriptor_table_sensorStreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 width = 1;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:sensorStreaming.ImageRPC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensorStreaming_2eproto;
};
// -------------------------------------------------------------------

class SensorFrameRPC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensorStreaming.SensorFrameRPC) */ {
 public:
  SensorFrameRPC();
  virtual ~SensorFrameRPC();

  SensorFrameRPC(const SensorFrameRPC& from);
  SensorFrameRPC(SensorFrameRPC&& from) noexcept
    : SensorFrameRPC() {
    *this = ::std::move(from);
  }

  inline SensorFrameRPC& operator=(const SensorFrameRPC& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorFrameRPC& operator=(SensorFrameRPC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorFrameRPC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorFrameRPC* internal_default_instance() {
    return reinterpret_cast<const SensorFrameRPC*>(
               &_SensorFrameRPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SensorFrameRPC& a, SensorFrameRPC& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorFrameRPC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorFrameRPC* New() const final {
    return CreateMaybeMessage<SensorFrameRPC>(nullptr);
  }

  SensorFrameRPC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorFrameRPC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorFrameRPC& from);
  void MergeFrom(const SensorFrameRPC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorFrameRPC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensorStreaming.SensorFrameRPC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensorStreaming_2eproto);
    return ::descriptor_table_sensorStreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
    kPoseFieldNumber = 2,
  };
  // .sensorStreaming.ImageRPC image = 1;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::sensorStreaming::ImageRPC& image() const;
  ::sensorStreaming::ImageRPC* release_image();
  ::sensorStreaming::ImageRPC* mutable_image();
  void set_allocated_image(::sensorStreaming::ImageRPC* image);
  private:
  const ::sensorStreaming::ImageRPC& _internal_image() const;
  ::sensorStreaming::ImageRPC* _internal_mutable_image();
  public:

  // .sensorStreaming.PoseRPC pose = 2;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::sensorStreaming::PoseRPC& pose() const;
  ::sensorStreaming::PoseRPC* release_pose();
  ::sensorStreaming::PoseRPC* mutable_pose();
  void set_allocated_pose(::sensorStreaming::PoseRPC* pose);
  private:
  const ::sensorStreaming::PoseRPC& _internal_pose() const;
  ::sensorStreaming::PoseRPC* _internal_mutable_pose();
  public:

  // @@protoc_insertion_point(class_scope:sensorStreaming.SensorFrameRPC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sensorStreaming::ImageRPC* image_;
  ::sensorStreaming::PoseRPC* pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensorStreaming_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NameRPC

// string cameraName = 1;
inline void NameRPC::clear_cameraname() {
  cameraname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NameRPC::cameraname() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.NameRPC.cameraName)
  return _internal_cameraname();
}
inline void NameRPC::set_cameraname(const std::string& value) {
  _internal_set_cameraname(value);
  // @@protoc_insertion_point(field_set:sensorStreaming.NameRPC.cameraName)
}
inline std::string* NameRPC::mutable_cameraname() {
  // @@protoc_insertion_point(field_mutable:sensorStreaming.NameRPC.cameraName)
  return _internal_mutable_cameraname();
}
inline const std::string& NameRPC::_internal_cameraname() const {
  return cameraname_.GetNoArena();
}
inline void NameRPC::_internal_set_cameraname(const std::string& value) {
  
  cameraname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NameRPC::set_cameraname(std::string&& value) {
  
  cameraname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sensorStreaming.NameRPC.cameraName)
}
inline void NameRPC::set_cameraname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cameraname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sensorStreaming.NameRPC.cameraName)
}
inline void NameRPC::set_cameraname(const char* value, size_t size) {
  
  cameraname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sensorStreaming.NameRPC.cameraName)
}
inline std::string* NameRPC::_internal_mutable_cameraname() {
  
  return cameraname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NameRPC::release_cameraname() {
  // @@protoc_insertion_point(field_release:sensorStreaming.NameRPC.cameraName)
  
  return cameraname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NameRPC::set_allocated_cameraname(std::string* cameraname) {
  if (cameraname != nullptr) {
    
  } else {
    
  }
  cameraname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cameraname);
  // @@protoc_insertion_point(field_set_allocated:sensorStreaming.NameRPC.cameraName)
}

// -------------------------------------------------------------------

// CameraIntrinsicsRPC

// float fx = 1;
inline void CameraIntrinsicsRPC::clear_fx() {
  fx_ = 0;
}
inline float CameraIntrinsicsRPC::_internal_fx() const {
  return fx_;
}
inline float CameraIntrinsicsRPC::fx() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.CameraIntrinsicsRPC.fx)
  return _internal_fx();
}
inline void CameraIntrinsicsRPC::_internal_set_fx(float value) {
  
  fx_ = value;
}
inline void CameraIntrinsicsRPC::set_fx(float value) {
  _internal_set_fx(value);
  // @@protoc_insertion_point(field_set:sensorStreaming.CameraIntrinsicsRPC.fx)
}

// float fy = 2;
inline void CameraIntrinsicsRPC::clear_fy() {
  fy_ = 0;
}
inline float CameraIntrinsicsRPC::_internal_fy() const {
  return fy_;
}
inline float CameraIntrinsicsRPC::fy() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.CameraIntrinsicsRPC.fy)
  return _internal_fy();
}
inline void CameraIntrinsicsRPC::_internal_set_fy(float value) {
  
  fy_ = value;
}
inline void CameraIntrinsicsRPC::set_fy(float value) {
  _internal_set_fy(value);
  // @@protoc_insertion_point(field_set:sensorStreaming.CameraIntrinsicsRPC.fy)
}

// float cx = 3;
inline void CameraIntrinsicsRPC::clear_cx() {
  cx_ = 0;
}
inline float CameraIntrinsicsRPC::_internal_cx() const {
  return cx_;
}
inline float CameraIntrinsicsRPC::cx() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.CameraIntrinsicsRPC.cx)
  return _internal_cx();
}
inline void CameraIntrinsicsRPC::_internal_set_cx(float value) {
  
  cx_ = value;
}
inline void CameraIntrinsicsRPC::set_cx(float value) {
  _internal_set_cx(value);
  // @@protoc_insertion_point(field_set:sensorStreaming.CameraIntrinsicsRPC.cx)
}

// float cy = 4;
inline void CameraIntrinsicsRPC::clear_cy() {
  cy_ = 0;
}
inline float CameraIntrinsicsRPC::_internal_cy() const {
  return cy_;
}
inline float CameraIntrinsicsRPC::cy() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.CameraIntrinsicsRPC.cy)
  return _internal_cy();
}
inline void CameraIntrinsicsRPC::_internal_set_cy(float value) {
  
  cy_ = value;
}
inline void CameraIntrinsicsRPC::set_cy(float value) {
  _internal_set_cy(value);
  // @@protoc_insertion_point(field_set:sensorStreaming.CameraIntrinsicsRPC.cy)
}

// -------------------------------------------------------------------

// MatRPC

// float m11 = 1;
inline void MatRPC::clear_m11() {
  m11_ = 0;
}
inline float MatRPC::_internal_m11() const {
  return m11_;
}
inline float MatRPC::m11() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.MatRPC.m11)
  return _internal_m11();
}
inline void MatRPC::_internal_set_m11(float value) {
  
  m11_ = value;
}
inline void MatRPC::set_m11(float value) {
  _internal_set_m11(value);
  // @@protoc_insertion_point(field_set:sensorStreaming.MatRPC.m11)
}

// float m12 = 2;
inline void MatRPC::clear_m12() {
  m12_ = 0;
}
inline float MatRPC::_internal_m12() const {
  return m12_;
}
inline float MatRPC::m12() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.MatRPC.m12)
  return _internal_m12();
}
inline void MatRPC::_internal_set_m12(float value) {
  
  m12_ = value;
}
inline void MatRPC::set_m12(float value) {
  _internal_set_m12(value);
  // @@protoc_insertion_point(field_set:sensorStreaming.MatRPC.m12)
}

// float m13 = 3;
inline void MatRPC::clear_m13() {
  m13_ = 0;
}
inline float MatRPC::_internal_m13() const {
  return m13_;
}
inline float MatRPC::m13() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.MatRPC.m13)
  return _internal_m13();
}
inline void MatRPC::_internal_set_m13(float value) {
  
  m13_ = value;
}
inline void MatRPC::set_m13(float value) {
  _internal_set_m13(value);
  // @@protoc_insertion_point(field_set:sensorStreaming.MatRPC.m13)
}

// float m14 = 4;
inline void MatRPC::clear_m14() {
  m14_ = 0;
}
inline float MatRPC::_internal_m14() const {
  return m14_;
}
inline float MatRPC::m14() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.MatRPC.m14)
  return _internal_m14();
}
inline void MatRPC::_internal_set_m14(float value) {
  
  m14_ = value;
}
inline void MatRPC::set_m14(float value) {
  _internal_set_m14(value);
  // @@protoc_insertion_point(field_set:sensorStreaming.MatRPC.m14)
}

// float m21 = 5;
inline void MatRPC::clear_m21() {
  m21_ = 0;
}
inline float MatRPC::_internal_m21() const {
  return m21_;
}
inline float MatRPC::m21() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.MatRPC.m21)
  return _internal_m21();
}
inline void MatRPC::_internal_set_m21(float value) {
  
  m21_ = value;
}
inline void MatRPC::set_m21(float value) {
  _internal_set_m21(value);
  // @@protoc_insertion_point(field_set:sensorStreaming.MatRPC.m21)
}

// float m22 = 6;
inline void MatRPC::clear_m22() {
  m22_ = 0;
}
inline float MatRPC::_internal_m22() const {
  return m22_;
}
inline float MatRPC::m22() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.MatRPC.m22)
  return _internal_m22();
}
inline void MatRPC::_internal_set_m22(float value) {
  
  m22_ = value;
}
inline void MatRPC::set_m22(float value) {
  _internal_set_m22(value);
  // @@protoc_insertion_point(field_set:sensorStreaming.MatRPC.m22)
}

// float m23 = 7;
inline void MatRPC::clear_m23() {
  m23_ = 0;
}
inline float MatRPC::_internal_m23() const {
  return m23_;
}
inline float MatRPC::m23() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.MatRPC.m23)
  return _internal_m23();
}
inline void MatRPC::_internal_set_m23(float value) {
  
  m23_ = value;
}
inline void MatRPC::set_m23(float value) {
  _internal_set_m23(value);
  // @@protoc_insertion_point(field_set:sensorStreaming.MatRPC.m23)
}

// float m24 = 8;
inline void MatRPC::clear_m24() {
  m24_ = 0;
}
inline float MatRPC::_internal_m24() const {
  return m24_;
}
inline float MatRPC::m24() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.MatRPC.m24)
  return _internal_m24();
}
inline void MatRPC::_internal_set_m24(float value) {
  
  m24_ = value;
}
inline void MatRPC::set_m24(float value) {
  _internal_set_m24(value);
  // @@protoc_insertion_point(field_set:sensorStreaming.MatRPC.m24)
}

// float m31 = 9;
inline void MatRPC::clear_m31() {
  m31_ = 0;
}
inline float MatRPC::_internal_m31() const {
  return m31_;
}
inline float MatRPC::m31() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.MatRPC.m31)
  return _internal_m31();
}
inline void MatRPC::_internal_set_m31(float value) {
  
  m31_ = value;
}
inline void MatRPC::set_m31(float value) {
  _internal_set_m31(value);
  // @@protoc_insertion_point(field_set:sensorStreaming.MatRPC.m31)
}

// float m32 = 10;
inline void MatRPC::clear_m32() {
  m32_ = 0;
}
inline float MatRPC::_internal_m32() const {
  return m32_;
}
inline float MatRPC::m32() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.MatRPC.m32)
  return _internal_m32();
}
inline void MatRPC::_internal_set_m32(float value) {
  
  m32_ = value;
}
inline void MatRPC::set_m32(float value) {
  _internal_set_m32(value);
  // @@protoc_insertion_point(field_set:sensorStreaming.MatRPC.m32)
}

// float m33 = 11;
inline void MatRPC::clear_m33() {
  m33_ = 0;
}
inline float MatRPC::_internal_m33() const {
  return m33_;
}
inline float MatRPC::m33() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.MatRPC.m33)
  return _internal_m33();
}
inline void MatRPC::_internal_set_m33(float value) {
  
  m33_ = value;
}
inline void MatRPC::set_m33(float value) {
  _internal_set_m33(value);
  // @@protoc_insertion_point(field_set:sensorStreaming.MatRPC.m33)
}

// float m34 = 12;
inline void MatRPC::clear_m34() {
  m34_ = 0;
}
inline float MatRPC::_internal_m34() const {
  return m34_;
}
inline float MatRPC::m34() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.MatRPC.m34)
  return _internal_m34();
}
inline void MatRPC::_internal_set_m34(float value) {
  
  m34_ = value;
}
inline void MatRPC::set_m34(float value) {
  _internal_set_m34(value);
  // @@protoc_insertion_point(field_set:sensorStreaming.MatRPC.m34)
}

// float m41 = 13;
inline void MatRPC::clear_m41() {
  m41_ = 0;
}
inline float MatRPC::_internal_m41() const {
  return m41_;
}
inline float MatRPC::m41() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.MatRPC.m41)
  return _internal_m41();
}
inline void MatRPC::_internal_set_m41(float value) {
  
  m41_ = value;
}
inline void MatRPC::set_m41(float value) {
  _internal_set_m41(value);
  // @@protoc_insertion_point(field_set:sensorStreaming.MatRPC.m41)
}

// float m42 = 14;
inline void MatRPC::clear_m42() {
  m42_ = 0;
}
inline float MatRPC::_internal_m42() const {
  return m42_;
}
inline float MatRPC::m42() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.MatRPC.m42)
  return _internal_m42();
}
inline void MatRPC::_internal_set_m42(float value) {
  
  m42_ = value;
}
inline void MatRPC::set_m42(float value) {
  _internal_set_m42(value);
  // @@protoc_insertion_point(field_set:sensorStreaming.MatRPC.m42)
}

// float m43 = 15;
inline void MatRPC::clear_m43() {
  m43_ = 0;
}
inline float MatRPC::_internal_m43() const {
  return m43_;
}
inline float MatRPC::m43() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.MatRPC.m43)
  return _internal_m43();
}
inline void MatRPC::_internal_set_m43(float value) {
  
  m43_ = value;
}
inline void MatRPC::set_m43(float value) {
  _internal_set_m43(value);
  // @@protoc_insertion_point(field_set:sensorStreaming.MatRPC.m43)
}

// float m44 = 16;
inline void MatRPC::clear_m44() {
  m44_ = 0;
}
inline float MatRPC::_internal_m44() const {
  return m44_;
}
inline float MatRPC::m44() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.MatRPC.m44)
  return _internal_m44();
}
inline void MatRPC::_internal_set_m44(float value) {
  
  m44_ = value;
}
inline void MatRPC::set_m44(float value) {
  _internal_set_m44(value);
  // @@protoc_insertion_point(field_set:sensorStreaming.MatRPC.m44)
}

// -------------------------------------------------------------------

// PoseRPC

// .sensorStreaming.MatRPC cameraProj = 1;
inline bool PoseRPC::_internal_has_cameraproj() const {
  return this != internal_default_instance() && cameraproj_ != nullptr;
}
inline bool PoseRPC::has_cameraproj() const {
  return _internal_has_cameraproj();
}
inline void PoseRPC::clear_cameraproj() {
  if (GetArenaNoVirtual() == nullptr && cameraproj_ != nullptr) {
    delete cameraproj_;
  }
  cameraproj_ = nullptr;
}
inline const ::sensorStreaming::MatRPC& PoseRPC::_internal_cameraproj() const {
  const ::sensorStreaming::MatRPC* p = cameraproj_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sensorStreaming::MatRPC*>(
      &::sensorStreaming::_MatRPC_default_instance_);
}
inline const ::sensorStreaming::MatRPC& PoseRPC::cameraproj() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.PoseRPC.cameraProj)
  return _internal_cameraproj();
}
inline ::sensorStreaming::MatRPC* PoseRPC::release_cameraproj() {
  // @@protoc_insertion_point(field_release:sensorStreaming.PoseRPC.cameraProj)
  
  ::sensorStreaming::MatRPC* temp = cameraproj_;
  cameraproj_ = nullptr;
  return temp;
}
inline ::sensorStreaming::MatRPC* PoseRPC::_internal_mutable_cameraproj() {
  
  if (cameraproj_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensorStreaming::MatRPC>(GetArenaNoVirtual());
    cameraproj_ = p;
  }
  return cameraproj_;
}
inline ::sensorStreaming::MatRPC* PoseRPC::mutable_cameraproj() {
  // @@protoc_insertion_point(field_mutable:sensorStreaming.PoseRPC.cameraProj)
  return _internal_mutable_cameraproj();
}
inline void PoseRPC::set_allocated_cameraproj(::sensorStreaming::MatRPC* cameraproj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cameraproj_;
  }
  if (cameraproj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cameraproj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cameraproj, submessage_arena);
    }
    
  } else {
    
  }
  cameraproj_ = cameraproj;
  // @@protoc_insertion_point(field_set_allocated:sensorStreaming.PoseRPC.cameraProj)
}

// .sensorStreaming.MatRPC cameraView = 2;
inline bool PoseRPC::_internal_has_cameraview() const {
  return this != internal_default_instance() && cameraview_ != nullptr;
}
inline bool PoseRPC::has_cameraview() const {
  return _internal_has_cameraview();
}
inline void PoseRPC::clear_cameraview() {
  if (GetArenaNoVirtual() == nullptr && cameraview_ != nullptr) {
    delete cameraview_;
  }
  cameraview_ = nullptr;
}
inline const ::sensorStreaming::MatRPC& PoseRPC::_internal_cameraview() const {
  const ::sensorStreaming::MatRPC* p = cameraview_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sensorStreaming::MatRPC*>(
      &::sensorStreaming::_MatRPC_default_instance_);
}
inline const ::sensorStreaming::MatRPC& PoseRPC::cameraview() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.PoseRPC.cameraView)
  return _internal_cameraview();
}
inline ::sensorStreaming::MatRPC* PoseRPC::release_cameraview() {
  // @@protoc_insertion_point(field_release:sensorStreaming.PoseRPC.cameraView)
  
  ::sensorStreaming::MatRPC* temp = cameraview_;
  cameraview_ = nullptr;
  return temp;
}
inline ::sensorStreaming::MatRPC* PoseRPC::_internal_mutable_cameraview() {
  
  if (cameraview_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensorStreaming::MatRPC>(GetArenaNoVirtual());
    cameraview_ = p;
  }
  return cameraview_;
}
inline ::sensorStreaming::MatRPC* PoseRPC::mutable_cameraview() {
  // @@protoc_insertion_point(field_mutable:sensorStreaming.PoseRPC.cameraView)
  return _internal_mutable_cameraview();
}
inline void PoseRPC::set_allocated_cameraview(::sensorStreaming::MatRPC* cameraview) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cameraview_;
  }
  if (cameraview) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cameraview = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cameraview, submessage_arena);
    }
    
  } else {
    
  }
  cameraview_ = cameraview;
  // @@protoc_insertion_point(field_set_allocated:sensorStreaming.PoseRPC.cameraView)
}

// .sensorStreaming.MatRPC frameToOrigin = 3;
inline bool PoseRPC::_internal_has_frametoorigin() const {
  return this != internal_default_instance() && frametoorigin_ != nullptr;
}
inline bool PoseRPC::has_frametoorigin() const {
  return _internal_has_frametoorigin();
}
inline void PoseRPC::clear_frametoorigin() {
  if (GetArenaNoVirtual() == nullptr && frametoorigin_ != nullptr) {
    delete frametoorigin_;
  }
  frametoorigin_ = nullptr;
}
inline const ::sensorStreaming::MatRPC& PoseRPC::_internal_frametoorigin() const {
  const ::sensorStreaming::MatRPC* p = frametoorigin_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sensorStreaming::MatRPC*>(
      &::sensorStreaming::_MatRPC_default_instance_);
}
inline const ::sensorStreaming::MatRPC& PoseRPC::frametoorigin() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.PoseRPC.frameToOrigin)
  return _internal_frametoorigin();
}
inline ::sensorStreaming::MatRPC* PoseRPC::release_frametoorigin() {
  // @@protoc_insertion_point(field_release:sensorStreaming.PoseRPC.frameToOrigin)
  
  ::sensorStreaming::MatRPC* temp = frametoorigin_;
  frametoorigin_ = nullptr;
  return temp;
}
inline ::sensorStreaming::MatRPC* PoseRPC::_internal_mutable_frametoorigin() {
  
  if (frametoorigin_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensorStreaming::MatRPC>(GetArenaNoVirtual());
    frametoorigin_ = p;
  }
  return frametoorigin_;
}
inline ::sensorStreaming::MatRPC* PoseRPC::mutable_frametoorigin() {
  // @@protoc_insertion_point(field_mutable:sensorStreaming.PoseRPC.frameToOrigin)
  return _internal_mutable_frametoorigin();
}
inline void PoseRPC::set_allocated_frametoorigin(::sensorStreaming::MatRPC* frametoorigin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete frametoorigin_;
  }
  if (frametoorigin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      frametoorigin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frametoorigin, submessage_arena);
    }
    
  } else {
    
  }
  frametoorigin_ = frametoorigin;
  // @@protoc_insertion_point(field_set_allocated:sensorStreaming.PoseRPC.frameToOrigin)
}

// -------------------------------------------------------------------

// ImageRPC

// int32 width = 1;
inline void ImageRPC::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageRPC::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageRPC::width() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.ImageRPC.width)
  return _internal_width();
}
inline void ImageRPC::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void ImageRPC::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:sensorStreaming.ImageRPC.width)
}

// int32 height = 2;
inline void ImageRPC::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageRPC::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageRPC::height() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.ImageRPC.height)
  return _internal_height();
}
inline void ImageRPC::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void ImageRPC::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:sensorStreaming.ImageRPC.height)
}

// bytes data = 3;
inline void ImageRPC::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ImageRPC::data() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.ImageRPC.data)
  return _internal_data();
}
inline void ImageRPC::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:sensorStreaming.ImageRPC.data)
}
inline std::string* ImageRPC::mutable_data() {
  // @@protoc_insertion_point(field_mutable:sensorStreaming.ImageRPC.data)
  return _internal_mutable_data();
}
inline const std::string& ImageRPC::_internal_data() const {
  return data_.GetNoArena();
}
inline void ImageRPC::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ImageRPC::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sensorStreaming.ImageRPC.data)
}
inline void ImageRPC::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sensorStreaming.ImageRPC.data)
}
inline void ImageRPC::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sensorStreaming.ImageRPC.data)
}
inline std::string* ImageRPC::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImageRPC::release_data() {
  // @@protoc_insertion_point(field_release:sensorStreaming.ImageRPC.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImageRPC::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:sensorStreaming.ImageRPC.data)
}

// -------------------------------------------------------------------

// SensorFrameRPC

// .sensorStreaming.ImageRPC image = 1;
inline bool SensorFrameRPC::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool SensorFrameRPC::has_image() const {
  return _internal_has_image();
}
inline void SensorFrameRPC::clear_image() {
  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::sensorStreaming::ImageRPC& SensorFrameRPC::_internal_image() const {
  const ::sensorStreaming::ImageRPC* p = image_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sensorStreaming::ImageRPC*>(
      &::sensorStreaming::_ImageRPC_default_instance_);
}
inline const ::sensorStreaming::ImageRPC& SensorFrameRPC::image() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.SensorFrameRPC.image)
  return _internal_image();
}
inline ::sensorStreaming::ImageRPC* SensorFrameRPC::release_image() {
  // @@protoc_insertion_point(field_release:sensorStreaming.SensorFrameRPC.image)
  
  ::sensorStreaming::ImageRPC* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::sensorStreaming::ImageRPC* SensorFrameRPC::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensorStreaming::ImageRPC>(GetArenaNoVirtual());
    image_ = p;
  }
  return image_;
}
inline ::sensorStreaming::ImageRPC* SensorFrameRPC::mutable_image() {
  // @@protoc_insertion_point(field_mutable:sensorStreaming.SensorFrameRPC.image)
  return _internal_mutable_image();
}
inline void SensorFrameRPC::set_allocated_image(::sensorStreaming::ImageRPC* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:sensorStreaming.SensorFrameRPC.image)
}

// .sensorStreaming.PoseRPC pose = 2;
inline bool SensorFrameRPC::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool SensorFrameRPC::has_pose() const {
  return _internal_has_pose();
}
inline void SensorFrameRPC::clear_pose() {
  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::sensorStreaming::PoseRPC& SensorFrameRPC::_internal_pose() const {
  const ::sensorStreaming::PoseRPC* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sensorStreaming::PoseRPC*>(
      &::sensorStreaming::_PoseRPC_default_instance_);
}
inline const ::sensorStreaming::PoseRPC& SensorFrameRPC::pose() const {
  // @@protoc_insertion_point(field_get:sensorStreaming.SensorFrameRPC.pose)
  return _internal_pose();
}
inline ::sensorStreaming::PoseRPC* SensorFrameRPC::release_pose() {
  // @@protoc_insertion_point(field_release:sensorStreaming.SensorFrameRPC.pose)
  
  ::sensorStreaming::PoseRPC* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::sensorStreaming::PoseRPC* SensorFrameRPC::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensorStreaming::PoseRPC>(GetArenaNoVirtual());
    pose_ = p;
  }
  return pose_;
}
inline ::sensorStreaming::PoseRPC* SensorFrameRPC::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:sensorStreaming.SensorFrameRPC.pose)
  return _internal_mutable_pose();
}
inline void SensorFrameRPC::set_allocated_pose(::sensorStreaming::PoseRPC* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:sensorStreaming.SensorFrameRPC.pose)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sensorStreaming

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sensorStreaming_2eproto
